
(add-hook 'prog-mode-hook 'column-number-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook 'electric-pair-mode)
(add-hook 'prog-mode-hook 'flymake-mode)
(add-hook 'prog-mode-hook 'hs-minor-mode)
(add-hook 'prog-mode-hook 'prettify-symbols-mode)

(global-set-key (kbd "M-n") #'flymake-goto-next-error)
(global-set-key (kbd "M-p") #'flymake-goto-prev-error)

(use-package eglot :ensure t :defer t
  :hook
  (prog-mode . eglot-ensure)
  :bind
  ("C-c e f" . eglot-format))

;; (use-package treesit
;;   :when (and (fboundp 'treesit-available-p)
;; 	     (treesit-available-p))
;;   :config (setq treesit-font-lock-level 4)
;;   :init
;;   (setq treesit-language-source-alist
;; 	'((bash       . ("https://github.com/tree-sitter/tree-sitter-bash"))
;; 	  (c          . ("https://github.com/tree-sitter/tree-sitter-c"))
;; 	  (cpp        . ("https://github.com/tree-sitter/tree-sitter-cpp"))
;; 	  (css        . ("https://github.com/tree-sitter/tree-sitter-css"))
;; 	  (cmake      . ("https://github.com/uyha/tree-sitter-cmake"))
;; 	  (csharp     . ("https://github.com/tree-sitter/tree-sitter-c-sharp.git"))
;; 	  (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile"))
;; 	  (elisp      . ("https://github.com/Wilfred/tree-sitter-elisp"))
;; 	  (go         . ("https://github.com/tree-sitter/tree-sitter-go"))
;; 	  (gomod      . ("https://github.com/camdencheek/tree-sitter-go-mod.git"))
;; 	  (html       . ("https://github.com/tree-sitter/tree-sitter-html"))
;; 	  (java       . ("https://github.com/tree-sitter/tree-sitter-java.git"))
;; 	  (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
;; 	  (json       . ("https://github.com/tree-sitter/tree-sitter-json"))
;; 	  (lua        . ("https://github.com/Azganoth/tree-sitter-lua"))
;; 	  (make       . ("https://github.com/alemuller/tree-sitter-make"))
;; 	  (markdown   . ("https://github.com/MDeiml/tree-sitter-markdown" nil "tree-sitter-markdown/src"))
;; 	  (ocaml      . ("https://github.com/tree-sitter/tree-sitter-ocaml" nil "ocaml/src"))
;; 	  (org        . ("https://github.com/milisims/tree-sitter-org"))
;; 	  (python     . ("https://github.com/tree-sitter/tree-sitter-python"))
;; 	  (php        . ("https://github.com/tree-sitter/tree-sitter-php"))
;; 	  (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
;; 	  (tsx        . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "tsx/src"))
;; 	  (ruby       . ("https://github.com/tree-sitter/tree-sitter-ruby"))
;; 	  (rust       . ("https://github.com/tree-sitter/tree-sitter-rust"))
;; 	  (sql        . ("https://github.com/m-novikov/tree-sitter-sql"))
;; 	  (vue        . ("https://github.com/merico-dev/tree-sitter-vue"))
;; 	  (yaml       . ("https://github.com/ikatyang/tree-sitter-yaml"))
;; 	  (toml       . ("https://github.com/tree-sitter/tree-sitter-toml"))
;; 	  (zig        . ("https://github.com/GrayJack/tree-sitter-zig"))))
;;   (add-to-list 'major-mode-remap-alist '(sh-mode         . bash-ts-mode))
;;   (add-to-list 'major-mode-remap-alist '(c-mode          . c-ts-mode))
;;   (add-to-list 'major-mode-remap-alist '(c++-mode        . c++-ts-mode))
;;   (add-to-list 'major-mode-remap-alist '(c-or-c++-mode   . c-or-c++-ts-mode))
;;   (add-to-list 'major-mode-remap-alist '(css-mode        . css-ts-mode))
;;   (add-to-list 'major-mode-remap-alist '(js-mode         . js-ts-mode))
;;   (add-to-list 'major-mode-remap-alist '(java-mode       . java-ts-mode))
;;   (add-to-list 'major-mode-remap-alist '(js-json-mode    . json-ts-mode))
;;   (add-to-list 'major-mode-remap-alist '(makefile-mode   . cmake-ts-mode))
;;   (add-to-list 'major-mode-remap-alist '(python-mode     . python-ts-mode))
;;   (add-to-list 'major-mode-remap-alist '(ruby-mode       . ruby-ts-mode))
;;   (add-to-list 'major-mode-remap-alist '(conf-toml-mode  . toml-ts-mode))
;;   (add-to-list 'auto-mode-alist '("\\(?:Dockerfile\\(?:\\..*\\)?\\|\\.[Dd]ockerfile\\)\\'" . dockerfile-ts-mode))
;;   (add-to-list 'auto-mode-alist '("\\.go\\'" . go-ts-mode))
;;   (add-to-list 'auto-mode-alist '("/go\\.mod\\'" . go-mod-ts-mode))
;;   (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
;;   (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
;;   (add-to-list 'auto-mode-alist '("\\.y[a]?ml\\'" . yaml-ts-mode)))

(use-package semantic)
(semantic-mode 1)
(global-semantic-idle-completions-mode t)
(global-semantic-decoration-mode t)
(global-semantic-highlight-func-mode t)
(global-semantic-show-unmatched-syntax-mode t)

;; (use-package xcscope
;;   :init
;;   (cscope-setup))

;; (provide 'init-cscope)

(provide 'init-code)
